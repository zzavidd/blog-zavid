name: inspect-build-test

on: push

env:
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DATABASE_TEST_URL: ${{ secrets.DATABASE_TEST_URL }}

jobs:
  inspect:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - uses: oven-sh/setup-bun@v1
      - uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: bun-cache-${{ hashFiles('bun.lockb') }}
          restore-keys: bun-cache-
      - run: bun install --frozen-lockfile
      - run: bun prisma generate
      - uses: actions/cache@v3
        with:
          path: .tsbuildinfo
          key:
            tscache-${{ hashFiles('tsconfig.json') }}-${{
            hashFiles('src/**/*.ts', 'src/**/*.tsx') }}
          restore-keys: tscache-${{ hashFiles('tsconfig.json') }}-
      - run: bun run tsc:ci
      - uses: actions/cache@v3
        with:
          path: .eslintcache
          key:
            eslintcache-${{ hashFiles('.eslintrc.js') }}-${{
            hashFiles('src/**/*.ts', 'src/**/*.tsx') }}
          restore-keys: eslintcache-${{ hashFiles('.eslintrc.js') }}-
      - run: bun run tsc:ci

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - uses: oven-sh/setup-bun@v1
      - uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: bun-cache-${{ hashFiles('bun.lockb') }}
          restore-keys: bun-cache-
      - run: bun install --frozen-lockfile
      - run: bun prisma generate
      - uses: actions/cache@v3
        id: next-cache
        with:
          path: .next/cache
          key:
            next-cache-${{ hashFiles('bun.lockb') }}-${{
            hashFiles('src/**/*.ts', 'src/**/*.tsx') }}
          restore-keys: next-cache-${{ hashFiles('bun.lockb') }}-
      - run: bun run build
        if: steps.next-cache.outputs.cache-hit != 'true'

  test-unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - uses: oven-sh/setup-bun@v1
      - uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: bun-cache-${{ hashFiles('bun.lockb') }}
          restore-keys: bun-cache-
      - run: bun install --frozen-lockfile
      - run: bun test unit

  test-e2e:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1/4, 2/4, 3/4, 4/4]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - uses: oven-sh/setup-bun@v1
      - uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: bun-cache-${{ hashFiles('bun.lockb') }}
          restore-keys: bun-cache-
      - run: bun install --frozen-lockfile
      - run: bun prisma generate
      - run:
          export PLAYWRIGHT_VERSION=$(npm ls @playwright/test | grep @playwright
          | sed 's/.*@//')
      - uses: actions/cache@v3
        id: cache-playwright-browsers
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ env.PLAYWRIGHT_VERSION }}
      - run: bunx playwright install --with-deps
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
      - run: bun run test --shard ${{ matrix.shard }}

  # deploy-staging:
  #   runs-on:
