name: Web App CI/CD

on: push

env:
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DATABASE_TEST_URL: ${{ secrets.DATABASE_TEST_URL }}

jobs:
  changes:
    runs-on: ubuntu-latest
    if: github.ref_name != 'production'
    outputs:
      srctest: ${{ steps.filter.outputs.srctest }}
      src: ${{ steps.filter.outputs.src }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            srctest:
              - src/**/*.{ts,tsx}
              - test/**/*.ts
            src:
              - src/**/*.{ts,tsx}

  inspect:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.srctest == 'true'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - uses: oven-sh/setup-bun@v1
      - uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: bun-cache-${{ hashFiles('bun.lockb') }}
          restore-keys: bun-cache-
      - run: bun install --frozen-lockfile
      - run: bun prisma generate
      - uses: actions/cache@v3
        with:
          path: .tsbuildinfo
          key: tscache-${{ hashFiles('tsconfig.json') }}-${{ hashFiles('src/**/*.ts', 'src/**/*.tsx') }}
          restore-keys: tscache-${{ hashFiles('tsconfig.json') }}-
      - run: bun run tsc:ci
      - uses: actions/cache@v3
        with:
          path: .eslintcache
          key: eslintcache-${{ hashFiles('.eslintrc.js') }}-${{ hashFiles('src/**/*.ts', 'src/**/*.tsx') }}
          restore-keys: eslintcache-${{ hashFiles('.eslintrc.js') }}-
      - run: bun run eslint

  build:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - uses: oven-sh/setup-bun@v1
      - uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: bun-cache-${{ hashFiles('bun.lockb') }}
          restore-keys: bun-cache-
      - run: bun install --frozen-lockfile
      - run: bun prisma generate
      - uses: actions/cache@v3
        id: next-cache
        with:
          path: .next/cache
          key: next-cache-${{ hashFiles('bun.lockb') }}-${{ hashFiles('src/**/*.ts', 'src/**/*.tsx') }}
          restore-keys: next-cache-${{ hashFiles('bun.lockb') }}-
      - run: bun run build
        if: steps.next-cache.outputs.cache-hit != 'true'

  test-unit:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.srctest == 'true'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - uses: oven-sh/setup-bun@v1
      - uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: bun-cache-${{ hashFiles('bun.lockb') }}
          restore-keys: bun-cache-
      - run: bun install --frozen-lockfile
      - run: bun test unit

  test-e2e:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.srctest == 'true'
    strategy:
      fail-fast: false
      matrix:
        shard: [1/4, 2/4, 3/4, 4/4]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - uses: oven-sh/setup-bun@v1
      - uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: bun-cache-${{ hashFiles('bun.lockb') }}
          restore-keys: bun-cache-
      - run: bun install --frozen-lockfile
      - run: bun prisma generate
      - run: bunx playwright install --with-deps
      - run: bun run test --shard ${{ matrix.shard }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [changes, inspect, build, test-unit, test-e2e]
    if: always() && github.ref_name == 'main' && needs.changes.outputs.src == 'true' && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    steps:
      - uses: actions/checkout@v3
      - uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST}}
          username: ${{ secrets.SSH_USER}}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: /var/www/dev.zavid/devops/scripts/deploy.staging.sh

  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref_name == 'production'
    steps:
      - uses: actions/checkout@v3
      - uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST}}
          username: ${{ secrets.SSH_USER}}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: /var/www/zavid/devops/scripts/deploy.production.sh
