name: Deploy ZAVID Blog

on: push

jobs:
  inspect:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/install
      - name: "Cache TypeScript build info"
        uses: actions/cache@v3
        id: tscache
        with:
          path: ${{ github.workspace }}/code/.tsbuildinfo
          key: ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig.json') }}
          restore-keys: ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig.json') }}
      - name: "Run TypeScript checks"
        run: pnpm run tsc:ci
        working-directory: code
        if: steps.tscache.outputs.cache-hit != 'true'
      - name: "Cache ESLint results"
        uses: actions/cache@v3
        id: eslintcache
        with:
          path: ${{ github.workspace }}/code/.eslintcache
          key: ${{ runner.os }}-eslint-${{ hashFiles('**/.eslintrc.js') }}
          restore-keys: ${{ runner.os }}-eslint-${{ hashFiles('**/.eslintrc.js') }}
      - name: "Run ESLint"
        run: pnpm run eslint --max-warnings 0
        working-directory: code
        if: steps.eslintcache.outputs.cache-hit != 'true'
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/install
      - name: "Cache Next.js build"
        uses: actions/cache@v3
        id: nextjscache
        with:
          path: ${{ github.workspace }}/code/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
          restore-keys: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
      - name: "Build project"
        run: pnpm run build
        working-directory: code
        if: steps.nextjscache.outputs.cache-hit != 'true'
      
  test:
    name: "Playwright Tests - ${{ matrix.project }} - Shard ${{ matrix.shardIndex }} of ${{ matrix.shardTotal }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, webkit]
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/install
      - name: "Get installed Playwright version"
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').dependencies['@playwright/test'].version)")" >> $GITHUB_ENV
      - name: "Cache Playwright binaries"
        uses: actions/cache@v3
        id: playwrightcache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - name: "Install test browsers"
        run: pnpm playwright install --with-deps
        if: steps.playwrightcache.outputs.cache-hit != 'true'
        working-directory: code
      - name: "Run e2e tests"
        run: pnpm run test --project=${{ matrix.project }} --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
        working-directory: code
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      # - name: "Publish test report"
      #   uses: mikepenz/action-junit-report@v3.7.8
      #   if: always()
      #   with:
      #     report_paths: ${{ github.workspace }}/code/test/results/results.xml