version: 2.1

no_production: &no_production
  filters:
    branches:
      ignore:
        - production

executors:
  node:
    docker:
      - image: node:18.17.1-alpine
  ssh:
    docker:
      - image: arvindr226/alpine-ssh
  playwright:
    docker:
      - image: mcr.microsoft.com/playwright:v1.34.3-jammy

commands:
  install_dependencies:
    description: "Installs all project dependencies."
    steps:
      - checkout
      - run: apk add unzip
      - run: curl -fsSL https://bun.sh/install | bash
      - restore_cache:
          name: "Restore Bun cache"
          keys:
            - bun-packages-{{ checksum "./code/bun.lockb" }}
            - bun-packages-
      - run:
          name: "Install dependencies"
          command: bun install --frozen-lockfile
          working_directory: ./code
      - save_cache:
          name: "Save Bun cache"
          key: bun-packages-{{ checksum "./code/bun.lockb" }}
          paths:
            - ./code/node_modules
      - run:
          name: "Generate Prisma models"
          command: bun prisma generate
          working_directory: ./code
  transfer_scripts:
    description: "Transfers deployment scripts via SCP"
    parameters:
      mode:
        type: string
    steps:
      - checkout
      - run:
          name: "Transfer scripts"
          command: scp -o StrictHostKeyChecking=no -r ./devops/scripts/* $SSH_USER@$SSH_ADDRESS:/home/circleci/scripts/
          no_output_timeout: 30s
      - run:
          name: Run << parameters.mode >> deployment
          command: |
            ssh -o StrictHostKeyChecking=no -v $SSH_USER@$SSH_ADDRESS "./scripts/deploy.<< parameters.mode >>.sh"

jobs:
  inspect:
    executor: node
    steps:
      - install_dependencies
      - restore_cache:
          name: "Restore TypeScript build info"
          keys:
            - tscache-{{ checksum "./code/tsconfig.json" }}
            - tscache-
      - run:
          name: "Run TypeScript checks"
          command: bun run tsc:ci
          working_directory: ./code
      - save_cache:
          name: "Save TypeScript build info"
          key: tscache-{{ checksum "./code/tsconfig.json" }}
          paths:
            - ./code/.tsbuildinfo
      - restore_cache:
          name: "Restore ESlint cache info"
          keys:
            - eslintcache-{{ checksum "./code/.eslintrc.js" }}
            - eslintcache-
      - run:
          name: "Run ESLint"
          command: bun run eslint --max-warnings 0
          working_directory: ./code
      - save_cache:
          name: "Save ESLint cache"
          key: eslintcache-{{ checksum "./code/.eslintrc.js" }}
          paths:
            - ./code/.eslintcache
  build:
    executor: node
    steps:
      - install_dependencies
      - restore_cache:
          name: "Restore build cache"
          keys:
            - next-build-{{ checksum "./code/bun.lockb" }}
            - next-build-
      - run:
          name: "Build project"
          command: pnpm run build
          working_directory: ./code
      - save_cache:
          key: next-build-{{ checksum "./code/bun.lockb" }}
          paths:
            - ./code/.next/cache
  test:
    executor: playwright
    parallelism: 4
    steps:
      - install_dependencies
      - run:
          name: "Run unit tests"
          command: bun test unit
          working_directory: ./code
      - run:
          name: "Run e2e tests"
          command: |
            TEST_FILES=$(circleci tests glob "test/e2e/**/*.ts")
            echo "$TEST_FILES" | circleci tests run --command="xargs bun run test" --verbose --split-by=timings
          working_directory: ./code
      - store_test_results:
          path: ./code/test/results/
  deploy_staging:
    executor: ssh
    steps:
      - transfer_scripts:
          mode: staging
  deploy_prod:
    executor: ssh
    steps:
      - transfer_scripts:
          mode: production

workflows:
  inspect_test_deploy:
    jobs:
      - inspect: *no_production
      - build: *no_production
      - test: *no_production
      - deploy_staging:
          requires:
            - inspect
            - build
            - test
          filters:
            branches:
              only:
                - main
      - deploy_prod:
          filters:
            branches:
              only:
                - production
