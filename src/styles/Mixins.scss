/// Caters responsively to different attributes based on screen size.
/// @param {string} $attr - The CSS attribute.
/// @param {any} $default - The default value for the attribute.
/// @param {any} [$sm] - Optional value for mobile phones.
/// @param {any} [$md] - Optional value for tablets
/// @param {any} [$lg] - Optional value for small desktops
/// @param {any} [$xl] - Optional value for large desktops.
@mixin responsive($attr, $default, $sm: 0, $md: 0, $lg: 0, $xl: 0) {
  #{$attr}: $default;

  @if $xl != 0 {
    @media (max-width: $break-xl) {
      #{$attr}: $xl;
    }
  }

  @if $lg != 0 {
    @media (max-width: $break-lg) {
      #{$attr}: $lg;
    }
  }

  @if $md != 0 {
    @media (max-width: $break-md) {
      #{$attr}: $md;
    }
  }

  @if $sm != 0 {
    @media (max-width: $break-sm) {
      #{$attr}: $sm;
    }
  }
}

/// Changes a class' attribute based on the current theme.
/// @param {string} $class - The reference class.
/// @param {string} $attr - The CSS attribute.
/// @param {any} $light - The value when the theme is light.
/// @param {any} $dark - The value when the theme is dark.
@mixin themer($class, $attr, $light, $dark) {
  &-light {
    @extend #{$class};
    #{$attr}: $light;
  }

  &-dark {
    @extend #{$class};
    #{$attr}: $dark;
  }
}

/// Configures the colors of a button.
/// @param {string} $class - The class using this mixin.
/// @param {color} $base - The base colour of the button.
@mixin button-designer($class, $base) {
  $colors: (
    light: change-color($base, $alpha: 0.9),
    dark: change-color($base, $alpha: 0.5)
  );
  @each $theme in $themes {
    $color: map-get($colors, $theme);
    &-#{$theme} {
      @extend #{$class};
      background-color: $color;

      &:hover {
        box-shadow: inset 0 0 100px 100px adjust-color($color, $lightness: 10%);
      }

      &:active {
        box-shadow: inset 0 0 100px 100px adjust-color($color, $lightness: 70%);
        transition-duration: 0.1s;
      }
    }
  }
}

/// Scales a component on mouse-over.
/// @param {number} $scale - The scale factor.
@mixin hover-scale($scale) {
  @media (min-width: $break-sm) {
    transition: transform 0.2s ease-in-out;

    &:hover {
      transform: scale($scale);
    }
  }
}
